{
    "Resources": {
        "CodeBuild": {
            "Properties": {
                "Artifacts": {
                    "Name": "output",
                    "Type": "CODEPIPELINE"
                },
                "Environment": {
                    "ComputeType": "BUILD_GENERAL1_SMALL",
                    "EnvironmentVariables": [
                        {
                            "Name": "_BUILDAH_STARTED_IN_USERNS",
                            "Value": ""
                        },
                        {
                            "Name": "BUILDAH_ISOLATION",
                            "Value": "chroot"
                        },
                        {
                            "Name": "REPOSITORY_NAME",
                            "Value": "helloworld"
                        },
                        {
                            "Name": "REPOSITORY_URI",
                            "Value": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ".dkr.ecr.",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ".amazonaws.com",
                                        "/",
                                        "helloworld"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Image": "aws/codebuild/docker:1.12.1",
                    "Type": "LINUX_CONTAINER"
                },
                "Name": "HelloWorldContainer",
                "ServiceRole": {
                    "Ref": "ServiceRole"
                },
                "Source": {
                    "BuildSpec": "version: 0.2\nphases:\n  install:\n    commands:\n      - uname -a\n    #   - sestatus -v\n    #   - ps -ef | grep selinux\n    #   - cat /etc/selinux/config\n    #   - sed -i s/^SELINUX=.*$/SELINUX=permissive/ /etc/selinux/config\n    #   - cat /etc/selinux/config\n    #   - touch /.autorelabel\n    #   - shutdown -r now\n    #   - getenforce\n    #  - curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo\n    #  - yum -y update\n    #  - rpm --restore shadow-utils 2>/dev/null\n    #  - yum -y install yum-plugin-copr\n    #  - yum -y copr enable lsm5/container-selinux\n    #  - yum -y install buildah fuse-overlayfs\n    #  - yum -y install fuse-overlayfs\n    #  - mkdir -p /var/lib/shared/overlay-images /var/lib/shared/overlay-layers /var/lib/shared/vfs-images /var/lib/shared/vfs-layers\n    #  - touch /var/lib/shared/overlay-images/images.lock\n    #  - touch /var/lib/shared/overlay-layers/layers.lock\n    #  - touch /var/lib/shared/vfs-images/images.lock\n    #  - touch /var/lib/shared/vfs-layers/layers.lock\n    #   - cat /etc/containers/storage.conf\n    #  - sed -i -e 's|^#mount_program|mount_program|g' -e '/additionalimage.*/a \"/var/lib/shared\",' -e 's/^mountopt =.*/mountopt = \"nodev,fsync=0\"/g' /etc/containers/storage.conf\n    #   - cat /etc/containers/storage.conf\n    #  - curl -L -o /etc/containers/containers.conf https://raw.githubusercontent.com/containers/buildah/main/contrib/buildahimage/stable/containers.conf\n    #   - cat /etc/containers/containers.conf\n    #   - useradd build\n    #   - echo -e \"build:1:999\" >> /etc/subuid\n    #   - echo -e \"build:1001:64535\" >> /etc/subuid\n    #   - cat /etc/subuid\n    #   - echo -e \"build:1:999\" >> /etc/subgid\n    #   - echo -e \"build:1001:64535\" >> /etc/subgid\n    #   - cat /etc/subgid\n    #   - mkdir -p /home/build/.local/share/containers\n    #   - chown -R build:build /home/build\n    #\n    #   - yum -y install make golang bats btrfs-progs-devel device-mapper-devel glib2-devel gpgme-devel libassuan-devel libseccomp-devel git bzip2 go-md2man runc containers-common fuse-overlayfs\n    #   - sed -i 's/^mountopt =.*/mountopt = \"nodev,fsync=0\"/g' /etc/containers/storage.conf\n    #   - yum -y install containernetworking-cni\n    #   - mkdir ~/buildah\n    #   - cd ~/buildah\n    #   - export GOPATH=`pwd`\n    #   - git clone https://github.com/containers/buildah ./src/github.com/containers/buildah\n    #   - cd ./src/github.com/containers/buildah\n    #   - make\n    #   - make install\n    #   - buildah --help\n    #\n    #\n    #   - apt-get -y install software-properties-common\n    #   - add-apt-repository -y ppa:alexlarsson/flatpak\n    #   - add-apt-repository -y ppa:gophers/archive\n    #   - apt-add-repository -y ppa:projectatomic/ppa\n    #   - apt-get -y -qq update\n    #   - apt-get -y install bats btrfs-tools git libapparmor-dev libdevmapper-dev libglib2.0-dev libgpgme11-dev libseccomp-dev libselinux1-dev skopeo-containers go-md2man\n    #   - apt-get -y install golang-1.13\n    #   - apt-get -y install containernetworking-plugins\n    #   - mkdir ~/buildah\n    #   - cd ~/buildah\n    #   - export GOPATH=`pwd`\n    #   - git clone https://github.com/containers/buildah ./src/github.com/containers/buildah\n    #   - cd ./src/github.com/containers/buildah\n    #   - PATH=/usr/lib/go-1.13/bin:$PATH make runc all SECURITYTAGS=\"apparmor seccomp\"\n    #   - make install install.runc\n    #   - buildah --help\n    #\n    #   - apt-get -y install buildah\n    #   - useradd build\n  pre_build:\n    commands:\n    #   - aws --version\n    #   - echo \"${CODEBUILD_INITIATOR##*/}\"\n      - aws codepipeline get-pipeline-state --name \"${CODEBUILD_INITIATOR##*/}\" --query stageStates[?actionStates[0].latestExecution.externalExecutionId==\\`$CODEBUILD_BUILD_ID\\`].latestExecution.pipelineExecutionId --output=text > /tmp/execution_id.txt\n    #   - cat /tmp/execution_id.txt\n      - aws codepipeline get-pipeline-execution --pipeline-name \"${CODEBUILD_INITIATOR##*/}\" --pipeline-execution-id $(cat /tmp/execution_id.txt) --query 'pipelineExecution.artifactRevisions[0].revisionId' --output=text > /tmp/tag.txt\n    #   - cat /tmp/tag.txt\n      - printf \"%s:%s\" \"$REPOSITORY_URI\" \"$(cat /tmp/tag.txt)\" > /tmp/build_tag.txt\n    #   - cat /tmp/build_tag.txt\n      - printf '{\"tag\":\"%s\"}' \"$(cat /tmp/tag.txt)\" > /tmp/build.json\n    #   - cat /tmp/build.json\n      - $(aws ecr get-login --no-include-email)\n  build:\n    commands:\n      - docker login --username=actarus1272 --password=43FabTa86!\n    #   - docker build -t \"$(cat /tmp/build_tag.txt)\" .\n      - docker build --isolation=default -t \"$(cat /tmp/build_tag.txt)\" .\n    #   - buildah bud -f Dockerfile -t \"081052550542.dkr.ecr.us-east-1.amazonaws.com/helloworld:8e2a2affcdbafbb1f122edb8a3fa347b11b613eb\" .\n    #   - buildah bud --isolation=chroot --cap-add SYS_ADMIN --security-opt seccomp=/usr/share/containers/seccomp.json --security-opt apparmor=unconfined --device=/dev/fuse -f Dockerfile -t \"$(cat /tmp/build_tag.txt)\" .\n    #   - buildah bud --isolation=chroot --security-opt seccomp=unconfined --security-opt apparmor=unconfined -f Dockerfile -t \"$(cat /tmp/build_tag.txt)\" .\n  post_build:\n    commands:\n      - docker push \"$(cat /tmp/build_tag.txt)\"\n    #   - buildah push \"081052550542.dkr.ecr.us-east-1.amazonaws.com/helloworld:8e2a2affcdbafbb1f122edb8a3fa347b11b613eb\"\n    #   - buildah push \"$(cat /tmp/build_tag.txt)\"\n    #   - aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag=\"$(cat /tmp/tag.txt)\" --output json | jq --raw-output --join-output '.images[0].imageManifest' | tee /tmp/latest_manifest.json\n      - aws ecr batch-get-image --repository-name $REPOSITORY_NAME --image-ids imageTag=\"$(cat /tmp/tag.txt)\" --query 'images[].imageManifest' --output text | tee /tmp/latest_manifest.json\n      - aws ecr put-image --repository-name $REPOSITORY_NAME --image-tag latest --image-manifest \"$(cat /tmp/latest_manifest.json)\"\nartifacts:\n  files: /tmp/build.json\n  discard-paths: yes\n",
                    "Type": "CODEPIPELINE"
                }
            },
            "Type": "AWS::CodeBuild::Project"
        },
        "ServiceRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codebuild.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSCodePipelineReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess",
                    "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser",
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
